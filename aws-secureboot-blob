#!/bin/bash -eu

# create a binary UEFI variable store blob which
# can be used create a AWS EC2 instance that support secure boot
#
# commands taken from https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/aws-binary-blob-creation.html


function create_blob() {
    local WORKDIR=$1
    local RESULT=$2

    # Create an empty PK signature list
    touch "${WORKDIR}"/empty_key.crt
    cert-to-efi-sig-list "${WORKDIR}"/empty_key.crt "${WORKDIR}"/PK.esl

    # Download the KEK certificates
    curl -s -L https://go.microsoft.com/fwlink/?LinkId=321185 --output "${WORKDIR}"/MicCorKEKCA2011_2011-06-24.crt
    # Wrap the KEK certificates in a UEFI signature list (siglist)
    sbsiglist --owner 77fa9abd-0359-4d32-bd60-28f4e78f784b --type x509 --output "${WORKDIR}"/MS_Win_KEK.esl "${WORKDIR}"/MicCorKEKCA2011_2011-06-24.crt

    # Download Microsoft's db certificates
    # MicWinProPCA2011_2011-10-19.crt is not needed. it's used to sign Microsoft products
    # we use the crt from the shim-signed source package (the microsoft link to the same file is https://www.microsoft.com/pkiops/certs/MicCorUEFCA2011_2011-06-27.crt)
    curl -s https://git.launchpad.net/ubuntu/+source/shim-signed/plain/MicCorUEFCA2011_2011-06-27.crt --output "${WORKDIR}"/MicCorUEFCA2011_2011-06-27.pem
    openssl x509 -outform der -in "${WORKDIR}"/MicCorUEFCA2011_2011-06-27.pem -out "${WORKDIR}"/MicCorUEFCA2011_2011-06-27.crt

    # Generate the db signature list
    sbsiglist --owner 77fa9abd-0359-4d32-bd60-28f4e78f784b --type x509 --output "${WORKDIR}"/MS_UEFI_db.esl "${WORKDIR}"/MicCorUEFCA2011_2011-06-27.crt

    # Build a UEFI variable store using the uefivars.py script
    # uefivars script taken from https://github.com/awslabs/python-uefivars
    uefivars -i none -o aws -O "$RESULT" -P "${WORKDIR}"/PK.esl -K "${WORKDIR}"/MS_Win_KEK.esl --db "${WORKDIR}"/MS_UEFI_db.esl
}


function usage() {
    cat << EOF >&2
    usage: $0 [-a|o|h]

    options:
        o    output filename. default: aws-uefiblob.bin
        h    this help
EOF
}


function cleanup {
  rm -rf "${TMPDIR}"
}


while getopts "ho:" option; do
   case $option in
      h)
         usage
         exit;;
      o)
          OUTPUT=$OPTARG;;
      \?)
          echo "Error: Invalid option"
          exit;;
   esac
done

TMPDIR=$(mktemp --directory aws-build-varstore-blob.XXXXXXXXXX)
trap cleanup EXIT
OUTPUT=${OUTPUT:-aws-uefiblob.bin}


create_blob "${TMPDIR}" "${OUTPUT}"
